/**
 * Created by jared on 9/25/15.
 *
 * Project Euler, problem #12
 *
 * The sequence of triangle numbers is generated by adding the
 * natural numbers. So the 7th triangle number would be
 * 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
 *
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 *
 * Let us list the factors of the first seven triangle numbers:
 *
 * 1: 1
 * 3: 1,3
 * 6: 1,2,3,6
 * 10: 1,2,5,10
 * 15: 1,3,5,15
 * 21: 1,3,7,21
 * 28: 1,2,4,7,14,28
 *
 * We can see that 28 is the first triangle number to
 * have over five divisors.
 *
 * What is the value of the first triangle number
 * to have over five hundred divisors?
 *
 */

public class E12 {

    private static int ongoingSum = 0;
    private static int rowNumber = 1;

    public static void main(String[] args) {
        boolean found = false;
        while (!found) {
            int tn = nextTriangularNumber();
            int dc = countDivisors(tn);
            if (dc > 500) {
                System.out.println(tn);
                found = true;
            }
        }
    }

    private static int countDivisors(long n) {
        // loop, as is, will never run for n == 1
        // hardcoding for n== 1 is the simple solution
        if (n == 1)
            return 1;

        int divisorCount = 0;
        for (long i = 1; i * i <= n / 2; i++) {
            if (n % i == 0 && i * i == n)
                divisorCount++;
            else if (n % i == 0 && i * i != n)
                divisorCount += 2;
        }
        return divisorCount;
    }

    private static int nextTriangularNumber() {
        ongoingSum += rowNumber;
        rowNumber++;
        return ongoingSum;
    }
}
